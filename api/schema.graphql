schema {
  query: Query
  mutation: Mutation
}

# ----- QUERIES -----

type Query {
  pet(input: PetInput!): Pet!
  pets(input: PetsInput!): PetConnection!
}

# ----- MUTATIONS -----

type Mutation {
  createPet(input: CreatePetInput!): CreatePetPayload!
  deletePet(input: DeletePetInput!): DeletePetPayload!
  updatePetOwner(input: UpdatePetOwnerInput!): UpdatePetOwnerPayload!
}

# ----- COMMON TYPES -----

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

# ----- PET TYPES -----

type Pet {
  id: ID!
  name: String!
  age: Int!
  owner: String
}

input CreatePetInput {
  name: String!
  age: Int!
  owner: String
}

type CreatePetPayload {
  pet: Pet!
}

input DeletePetInput {
  id: ID!
}

type DeletePetPayload {
  id: ID!
}

input PetInput {
  id: ID!
}

input PetsInput {
  first: Int
  after: String
}

type PetEdge {
  node: Pet!
  cursor: String!
}

type PetConnection {
  totalCount: Int!
  edges: [PetEdge!]
  pageInfo: PageInfo!
}

input UpdatePetOwnerInput {
  id: ID!
  owner: String!
}

type UpdatePetOwnerPayload {
  pet: Pet!
}
