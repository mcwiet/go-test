schema {
  query: Query
  mutation: Mutation
}

# ----- QUERIES -----

type Query {
  pet(input: PetInput!): Pet!
    @aws_iam @aws_cognito_user_pools
  pets(input: PetsInput!): PetConnection!
    @aws_iam @aws_cognito_user_pools
  user(input: UserInput!): User!
    @aws_iam @aws_cognito_user_pools
  users(input: UsersInput!): UserConnection!
    @aws_iam @aws_cognito_user_pools
}

# ----- MUTATIONS -----

type Mutation {
  createPet(input: CreatePetInput!): CreatePetPayload!
    @aws_cognito_user_pools
  deletePet(input: DeletePetInput!): DeletePetPayload!
    @aws_cognito_user_pools
  updatePetOwner(input: UpdatePetOwnerInput!): UpdatePetOwnerPayload!
    @aws_cognito_user_pools
}

# ----- COMMON TYPES -----

type PageInfo @aws_iam @aws_cognito_user_pools {
  endCursor: String
  hasNextPage: Boolean!
}

# ----- USER TYPES -----

input UserInput {
  username: String!
}

type User {
  username: String!
  email: String
  name: String
}

input UsersInput {
  first: Int!
  after: String
}

type UserEdge @aws_iam @aws_cognito_user_pools {
  node: User!
}

type UserConnection @aws_iam @aws_cognito_user_pools {
  totalCount: Int!
  edges: [UserEdge!]
  pageInfo: PageInfo!
}

# ----- PET TYPES -----

input PetInput {
  id: ID!
}

type Pet @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String!
  age: Int!
  owner: String
}

input PetsInput {
  first: Int!
  after: String
}

type PetEdge @aws_iam @aws_cognito_user_pools {
  node: Pet!
  cursor: String!
}

type PetConnection @aws_iam @aws_cognito_user_pools {
  totalCount: Int!
  edges: [PetEdge!]
  pageInfo: PageInfo!
}

input CreatePetInput {
  name: String!
  age: Int!
  owner: String
}

type CreatePetPayload @aws_cognito_user_pools {
  pet: Pet!
}

input DeletePetInput {
  id: ID!
}

type DeletePetPayload @aws_cognito_user_pools {
  id: ID!
}

input UpdatePetOwnerInput {
  id: ID!
  owner: String!
}

type UpdatePetOwnerPayload @aws_cognito_user_pools {
  pet: Pet!
}
