#################################################################################
# GLOBALS                                                                       #
#################################################################################

ENV_FILE = ./.env

# Load environemt variables from env file and export them (so they can be used by executed processes)
-include ${ENV_FILE}
export

# Constants
APP_NAME_API = api
AWS_LAMBDA_GOOS = linux
AWS_LAMBDA_GOARCH = amd64

DIR_PWD = $(shell pwd)
DIR_API_EVENTS = ${DIR_PWD}/test/_request
DIR_BUILD = ${DIR_PWD}/dist
DIR_CDK = ${DIR_PWD}/cdk.out
DIR_TEST_COVERAGE = ${DIR_PWD}/.coverage
DIR_WEB = ${DIR_PWD}/web
DIR_WEB_BUILD = ${DIR_WEB}/build
DIR_WEB_SRC = ${DIR_WEB}/src
DIR_WEB_MODEL = ${DIR_WEB_SRC}/model

CMD_GO = go

CMD_API_ID = aws ssm get-parameter --name /go/${ENV}/appsync-id | jq '.Parameter.Value'
CMD_API_URL = aws ssm get-parameter --name /go/${ENV}/appsync-url | jq '.Parameter.Value'
CMD_IDENTITY_POOL_ID = aws ssm get-parameter --name /go/${ENV}/identity-pool-id | jq '.Parameter.Value'
CMD_USER_POOL_ID = aws ssm get-parameter --name /go/${ENV}/user-pool-id | jq '.Parameter.Value'
CMD_USER_POOL_APP_CLIENT_ID = aws ssm get-parameter --name /go/${ENV}/user-pool-api-client-id | jq '.Parameter.Value'
CMD_WEB_BUCKET_NAME = aws ssm get-parameter --name /go/${ENV}/web-app-bucket-name | jq '.Parameter.Value'
CMD_WEB_DISTRIBUTION_ID = aws ssm get-parameter --name /go/${ENV}/web-app-distribution-id | jq '.Parameter.Value'

TRUE_CONDITIONS = true TRUE 1

# Conditional constants
ENV ?= development
SAVE_TEST_COVERAGE ?= false

#################################################################################
# COMMANDS                                                                      #
#################################################################################

## Build everything
build: build-api build-infra build-web
	@ echo "‚úÖ Done building everything"

## Build the API application
build-api:
	@ echo "‚è≥ Start building API..."
	@ ${CMD_GO} build -o ${DIR_BUILD}/${APP_NAME_API} ./cmd/api
	@ echo "‚úÖ Done building API"

## Build the infrastructure
build-infra:
	@ echo "‚è≥ Start building ${ENV} infrastructure..."
	@ cdk synth 
	@ echo "‚úÖ Done building ${ENV} infrastructure"

## Build the web UI application
build-web:
	@ echo "‚è≥ Start building web app..."
	@ cd ${DIR_WEB} && npm run build
	@ echo "‚úÖ Done building web app"

## Build an env file containing values for infrastructure-dependent environment variables
build-env-file:
	@ $(eval API_ID=$(shell ${CMD_API_ID}))
	@ $(eval API_URL=$(shell ${CMD_API_URL}))
	@ $(eval IDENTITY_POOL_ID=$(shell ${CMD_IDENTITY_POOL_ID}))
	@ $(eval USER_POOL_ID=$(shell ${CMD_USER_POOL_ID}))
	@ $(eval USER_POOL_APP_CLIENT_ID=$(shell ${CMD_USER_POOL_APP_CLIENT_ID}))
	@ $(eval WEB_BUCKET_NAME=$(shell ${CMD_WEB_BUCKET_NAME}))
	@ $(eval WEB_DISTRIBUTION_ID=$(shell ${CMD_WEB_DISTRIBUTION_ID}))
	@ echo "üö® FYI: Deleting existing ${ENV_FILE} file"
	@ rm -f ${ENV_FILE}
	@ echo "‚è≥ Start building ${ENV_FILE} file for ${ENV}..."
	@ echo "# --- AUTOGENERATED VALUES ---" >> ${ENV_FILE}
	@ echo "ENV=${ENV}" >> ${ENV_FILE}
	@ echo "AWS_ACCOUNT=${AWS_ACCOUNT}" >> ${ENV_FILE}
	@ echo "AWS_REGION=${AWS_REGION}" >> ${ENV_FILE}
	@ echo "USER_POOL_ID=${USER_POOL_ID}" >> ${ENV_FILE}
	@ echo "USER_POOL_APP_CLIENT_ID=${USER_POOL_APP_CLIENT_ID}" >> ${ENV_FILE}
	@ echo "API_ID=${API_ID}" >> ${ENV_FILE}
	@ echo "API_URL=${API_URL}" >> ${ENV_FILE}
	@ echo "WEB_BUCKET_NAME=${WEB_BUCKET_NAME}" >> ${ENV_FILE}
	@ echo "WEB_DISTRIBUTION_ID=${WEB_DISTRIBUTION_ID}" >> ${ENV_FILE}
	@ echo "" >> ${ENV_FILE}
	@ echo "# üö® CAUTION - 'REACT_APP...' VARIABLES GET EMBEDDED IN WEB BUILD OUTPUT üö®" >> ${ENV_FILE}
	@ echo "REACT_APP_AWS_REGION=${AWS_REGION}" >> ${ENV_FILE}
	@ echo "REACT_APP_API_URL=${API_URL}" >> ${ENV_FILE}
	@ echo "REACT_APP_IDENTITY_POOL_ID=${IDENTITY_POOL_ID}" >> ${ENV_FILE}
	@ echo "REACT_APP_USER_POOL_ID=${USER_POOL_ID}" >> ${ENV_FILE}
	@ echo "REACT_APP_USER_POOL_APP_CLIENT_ID=${USER_POOL_APP_CLIENT_ID}" >> ${ENV_FILE}
	@ echo "" >> ${ENV_FILE}
	@ echo "# --- MANUAL VALUES ---" >> ${ENV_FILE}
	@ echo "TEST_USER_EMAIL=${TEST_USER_EMAIL}" >> ${ENV_FILE}
	@ echo "TEST_USER_PASSWORD=${TEST_USER_PASSWORD}" >> ${ENV_FILE}
	@ echo "‚úÖ Done building ${ENV_FILE} file for ${ENV}"

## Create a user in the user pool for the current environment
create-test-user:
	@ $(eval USER_POOL_ID=$(shell ${CMD_USER_POOL_ID}))
ifndef TEST_USER_EMAIL
	@ echo "üö® MANUAL ACTION: Set value for TEST_USER_EMAIL"
else
ifndef TEST_USER_PASSWORD
	@ echo "üö® MANUAL ACTION: Set value for TEST_USER_PASSWORD"
else
	@ echo "‚è≥ Start creating ${ENV} user '${TEST_USER_EMAIL}'..."
	@ aws cognito-idp admin-create-user --user-pool-id ${USER_POOL_ID} --username ${TEST_USER_EMAIL} --message-action SUPPRESS
	@ aws cognito-idp admin-set-user-password --user-pool-id ${USER_POOL_ID} --username ${TEST_USER_EMAIL} --password ${TEST_USER_PASSWORD} --permanent
	@ echo "Updated attributes - password set"
	@ aws cognito-idp admin-update-user-attributes --user-pool-id ${USER_POOL_ID} --username ${TEST_USER_EMAIL} --user-attributes Name=email_verified,Value=true
	@ echo "Updated attributes - email verified"
	@ echo "‚úÖ Done creating ${ENV} user '${TEST_USER_EMAIL}'"
	@ echo "üö® MANUAL ACTION: Update ${ENV_FILE} file with user credentials (if needed)"
endif
endif

## Clean all build output
clean:
	@ echo "‚è≥ Start cleaning..."
	@ rm -rf ${DIR_BUILD}
	@ rm -rf ${DIR_CDK}
	@ rm -rf ${DIR_WEB_BUILD}
	@ echo "‚úÖ Done cleaning"

## Delete a user in the user pool for the current environment
delete-test-user:
	@ $(eval USER_POOL_ID=$(shell ${CMD_USER_POOL_ID}))
ifndef TEST_USER_EMAIL
	@ echo "üö® MANUAL ACTION: Set value for TEST_USER_EMAIL"
else
	@ echo "‚è≥ Start deleting ${ENV} user '${TEST_USER_EMAIL}'..."
	@ aws cognito-idp admin-delete-user --user-pool-id ${USER_POOL_ID} --username ${TEST_USER_EMAIL}
	@ echo "‚úÖ Done deleting ${ENV} user '${TEST_USER_EMAIL}'"
endif

## Deploy the infrastructure
deploy-infra:
	@ echo "‚è≥ Start deploying ${ENV} infrastructure..."
	@ cdk deploy --all
	@ echo "‚úÖ Done deploying ${ENV} infrastructure"

## Run the Amplify codegen tool for the web frontend
generate-web-schema:
	@ echo "‚è≥ Start generating the web app schema code..."
	@ cd ${DIR_WEB} && aws appsync get-introspection-schema --api-id ${API_ID} --format SDL ./schema.graphql && amplify codegen
	@ mv -f ${DIR_WEB_SRC}/api.ts ${DIR_WEB_MODEL}/api.ts 
	@ rm ${DIR_WEB}/schema.graphql
	@ echo "‚úÖ Done generating web app the schema code"

## Install dependencies
install:
	@ echo "‚è≥ Start installing dependencies..."
	@ ${CMD_GO} mod download
	@ cd ${DIR_WEB} && npm install
	@ echo "‚úÖ Done installing dependencies"

## Invoke the API; set API_REQUEST=[name of request] (e.g. use 'pet' for ./test/_request/pet.json)
invoke-api: build-infra
	@ echo "‚è≥ Invoking API with event '${DIR_API_EVENTS}/${API_REQUEST}.json'..."
	@ sam local invoke go-${ENV}-api-lambda -e ${DIR_API_EVENTS}/${API_REQUEST}.json -t ${DIR_CDK}/go-${ENV}-api.template.json
	@ echo "\n‚úÖ Done invoking API"

## Adds the test user to the admin group
promote-test-user:
	@ $(eval USER_POOL_ID=$(shell ${CMD_USER_POOL_ID}))
ifndef TEST_USER_EMAIL
	@ echo "üö® MANUAL ACTION: Set value for TEST_USER_EMAIL"
else
ifndef TEST_USER_PASSWORD
	@ echo "üö® MANUAL ACTION: Set value for TEST_USER_PASSWORD"
else
	@ echo "‚è≥ Promoting ${ENV} user '${TEST_USER_EMAIL}' to admin..."
	@ aws cognito-idp admin-add-user-to-group --user-pool-id ${USER_POOL_ID} --username ${TEST_USER_EMAIL} --group-name admin
	@ echo "‚úÖ Done promoting ${ENV} user '${TEST_USER_EMAIL}' to admin"
endif
endif

## Run integration tests (does not cache results)
test-integration:
	@ echo "‚è≥ Start running ${ENV} integration tests..."
	@ ${CMD_GO} test ./test/integration/... -count=1
	@ echo "‚úÖ Done running ${ENV} integration tests"

## Run unit tests all unit tests
test-unit: test-unit-pkg test-unit-web
	@ echo "‚úÖ Done running all unit tests"

## Run unit tests on library code (i.e. pkg/ directory)
test-unit-pkg: 
	@ echo "‚è≥ Start running library unit tests..."
ifeq (${SAVE_TEST_COVERAGE},$(filter ${SAVE_TEST_COVERAGE},${TRUE_CONDITIONS}))
	@ mkdir -p ${DIR_TEST_COVERAGE}
	@ ${CMD_GO} test ./pkg/... -coverprofile "${DIR_TEST_COVERAGE}/pkg.out" 
else
	@ ${CMD_GO} test ./pkg/... -cover
endif
	@ echo "‚úÖ Done running library unit tests"

## Run unit tests on web app code (i.e. web/ directory)
test-unit-web: 
	@ echo "‚è≥ Start running web app unit tests..."
ifeq (${SAVE_TEST_COVERAGE},$(filter ${SAVE_TEST_COVERAGE},${TRUE_CONDITIONS}))
	@ mkdir -p ${DIR_TEST_COVERAGE}
	@ cd ${DIR_WEB} && npm run test-save-coverage -- --coverageDirectory=${DIR_TEST_COVERAGE}
else
	@ cd ${DIR_WEB} && npm run test
endif
	@ echo "‚úÖ Done running web app unit tests"

## Build, package, and update the API application Lambda code (expects infrastructure to have been deployed)
update-api:
	@ echo "‚è≥ Start updating API Lambda code..."
	@ GOARCH=${AWS_LAMBDA_GOARCH} GOOS=${AWS_LAMBDA_GOOS} ${CMD_GO} build -o ${DIR_BUILD}/${APP_NAME_API} ./cmd/api
	@ rm -f ${DIR_BUILD}/bootstrap ${DIR_BUILD}/bootstrap.zip
	@ cp ${DIR_BUILD}/${APP_NAME_API} ${DIR_BUILD}/bootstrap
	@ zip -jr ${DIR_BUILD}/bootstrap.zip ${DIR_BUILD}/bootstrap
	@ aws lambda update-function-code --function-name go-${ENV}-api-lambda --zip-file fileb://${DIR_BUILD}/bootstrap.zip
	@ rm -f ${DIR_BUILD}/bootstrap ${DIR_BUILD}/bootstrap.zip
	@ echo "‚úÖ Done updating API Lambda code"

## Build, package, and update the web app (expects infrastructure to have been deployed)
update-web:
	@ echo "‚è≥ Start updating web app..."
	@ cd ${DIR_WEB} && npm run build
	@ aws s3 sync ${DIR_WEB_BUILD} s3://${WEB_BUCKET_NAME} --delete
	@ aws cloudfront create-invalidation --distribution-id ${WEB_DISTRIBUTION_ID} --paths "/*"
	@ echo "‚úÖ Done updating web app"

#################################################################################
# RESERVED                                                                      #
#################################################################################

.DEFAULT_GOAL := help
.PHONY: help
help:
	@echo "$$(tput bold)Available rules:$$(tput sgr0)"
	@echo
	@sed -n -e "/^## / { \
		h; \
		s/.*//; \
		:doc" \
		-e "H; \
		n; \
		s/^## //; \
		t doc" \
		-e "s/:.*//; \
		G; \
		s/\\n## /---/; \
		s/\\n/ /g; \
		p; \
	}" ${MAKEFILE_LIST} \
	| LC_ALL='C' sort --ignore-case \
	| awk -F '---' \
		-v ncol=$$(tput cols) \
		-v indent=19 \
		-v col_on="$$(tput setaf 6)" \
		-v col_off="$$(tput sgr0)" \
	'{ \
		printf "%s%*s%s ", col_on, -indent, $$1, col_off; \
		n = split($$2, words, " "); \
		line_length = ncol - indent; \
		for (i = 1; i <= n; i++) { \
			line_length -= length(words[i]) + 1; \
			if (line_length <= 0) { \
				line_length = ncol - indent - length(words[i]) - 1; \
				printf "\n%*s ", -indent, " "; \
			} \
			printf "%s ", words[i]; \
		} \
		printf "\n"; \
	}' \
	| more $(shell test $(shell uname) = Darwin && echo '--no-init --raw-control-chars')